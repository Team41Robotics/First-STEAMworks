#include <iostream>
#include <memory>
#include <string>
#include <WPIlib.h>
#include <IterativeRobot.h>
#include <LiveWindow/LiveWindow.h>
#include <SmartDashboard/SendableChooser.h>
#include <SmartDashboard/SmartDashboard.h>
#include <Driving.h>
#include <IMU.h>
#include <WPILib_auxiliary.h>
#include <opencv2/core/core.hpp>
#include <CameraServer.h>
#include <opencv2/imgproc/imgproc.hpp>

class Robot: public frc::IterativeRobot {
public:
	Driving *motion_control;
	Joystick *control_0;
	Joystick *control_1;

	CANTalon *shooterM1;
	CANTalon *shooterM2;
	CANTalon *barrel;
	CANTalon *shooterIntake;
	CANTalon *intake;
	BuiltInAccelerometer *accel_0;
//	ADXL345_I2C *accel_1;
	//SPI *test;
//	ADXRS450_Gyro *test;
	NetworkTable *table;

	Timer *timer;

	double totalDimension = 162;
	double dim1  = 25; //we’ll need to change this


	bool intakeShooterSet;
	void RobotInit() {
		chooser.AddDefault(autoNameDefault, autoNameDefault);
		chooser.AddObject(autoNameCustom, autoNameCustom);
		frc::SmartDashboard::PutData("Auto Modes", &chooser);
		motion_control = new Driving();
		control_0 = new Joystick(0);
		control_1 = new Joystick(1);

		//2 accelerometers because they both suck so maybe their sucking can interfere into no sucking?
/*		accel_0 = new BuiltInAccelerometer();
		accel_1 = new ADXL345_I2C(I2C::Port::kOnboard, Accelerometer::Range::kRange_4G);

		test = new ADXRS450_Gyro(frc::SPI::Port::kOnboardCS0);//make sure gyro has a jumper between desired port and channel
		test->Calibrate();
		test->Reset();*/
		table->GetTable("localhost");

		intakeShooterSet = false;
		timer = new Timer();
		timer->Reset();
	}

	void AutonomousInit() override {

	}

	double autonDriveSTR(double velocity)// call velocity using navx sensor
	{
	    Move(velocity,velocity,velocity,velocity);
	}

	double autonDriveTURN(double velocity) //take in velocity and degrees // turn a specified amount of degrees.
	{
	    Move(velocity,-velocity,velocity,-velocity);//needs to be tested to confirm direc of turn
	/*might need to be changed based on function arguments*/
	}

	double findA(double dim1)//a is the center point,
	{
	return (totalDimension)-dim1;
	}
	double RequiredPtDist(double dim1) // retuns how far to go forward
	{
	    return (139.3*sqrt(3)-findA(dim1))/sqrt(3);//Formula from board calcs - M+ N
	}

	void AutonomousPeriodic() {

	}

	void TeleopInit() {
		shooterM1 = new CANTalon(4);
		shooterM2 = new CANTalon(8);

		barrel = new CANTalon(5);
		shooterIntake = new CANTalon(1);

		intake = new CANTalon(10);
	}

	void TeleopPeriodic() {

		if(control_1->GetRawButton(1)){
			shooterM1->Set(-((-control_1->GetRawAxis(3)+1.0)/2.0));
			shooterM2->Set(((-control_1->GetRawAxis(3)+1.0)/2.0));
			if(!intakeShooterSet){
				timer->Start();
				intakeShooterSet = true;
			}
			if(timer->Get()>0.5)
				shooterIntake->Set(1.0);//pretty much tested, any value higher is not gonna make a difference -N
	 	}
		else{
			timer->Reset();
			shooterM1->Set(0);
			shooterM2->Set(0);
			shooterIntake->Set(0);
		}
		barrel->Set(control_1->GetRawAxis(1));

		motion_control->Manual_driving(control_0);

		if(control_0->GetRawButton(1)){
			//intake->Set(-((-control_0->GetRawAxis(3)+1.0)/2.0));//with the throttle
			intake->Set(-0.75);
		}
		else{
			intake->Set(0);
		}
	}

	void TestPeriodic() {
		lw->Run();
	}

private:
	frc::LiveWindow* lw = LiveWindow::GetInstance();
	frc::SendableChooser<std::string> chooser;
	const std::string autoNameDefault = "Default";
	const std::string autoNameCustom = "My Auto";
	std::string autoSelected;
};

START_ROBOT_CLASS(Robot)
