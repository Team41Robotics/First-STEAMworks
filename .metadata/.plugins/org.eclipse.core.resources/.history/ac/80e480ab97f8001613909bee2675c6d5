#include <iostream>
#include <memory>
#include <string>
#include <WPIlib.h>
#include <IterativeRobot.h>
#include <LiveWindow/LiveWindow.h>
#include <SmartDashboard/SendableChooser.h>
#include <SmartDashboard/SmartDashboard.h>
#include <Driving.h>
#include <WPILib_auxiliary.h>

class Robot: public frc::IterativeRobot {
public:
	Driving *motion_control;
	Joystick *control_0;

	int auton_step;

	void RobotInit() {
		chooser.AddDefault(left, left);
		chooser.AddObject(middle, middle);
		chooser.AddObject(right, right);
		frc::SmartDashboard::PutData("Auto Modes", &chooser);

		color.AddDefault(blue, blue);
		color.AddObject(red, red);
		frc::SmartDashboard::PutData("color Modes", &color);


		motion_control = new Driving();
		control_0 = new Joystick(0);
	}

	void AutonomousInit() override {
		autoSelected = chooser.GetSelected();
		std::cout << "Auto selected: " << autoSelected << std::endl;

		if (colorSelected == left) {
			SmartDashboard::PutString("Auton","left");
		}
		else if (autoSelected == middle) {
			SmartDashboard::PutString("Auton","middle");
		}
		else if (autoSelected == right){
			SmartDashboard::PutString("Auton","right");
		}

		colorSelected = color.GetSelected();
		std::cout << "Color selected: " << colorSelected << std::endl;

		if (colorSelected == blue) {
			SmartDashboard::PutString("Color","Blue");
		}
		else if (colorSelected == red) {
			SmartDashboard::PutString("Color","Red");
		}


		auton_step = 0;
		motion_control->imu->Reset(motion_control->nav);
	}
	void AutonomousPeriodic() {
		motion_control->imu->Localization(motion_control->nav);

		if(autoSelected == test)
		{
			if(auton_step == 0)
			{
				if(motion_control->NOPID_Move(114.5,0.3))
					auton_step = 1;
			}
			else if(auton_step == 1)
			{
				if(motion_control->NOPID_Turn(-120.0,0.2)){
					auton_step = 2;
					motion_control->imu->Reset(motion_control->nav);
					Wait(2);
				}
			}
			else if(auton_step == 2)
			{
				if(motion_control->NOPID_Turn(120.0,0.2)){
					auton_step = 3;
					motion_control->imu->Reset(motion_control->nav);
				}
			}
			else if(auton_step == 3)
			{
				if(motion_control->NOPID_Move(32.0,-0.2,false))
					auton_step = 4;
			}
			else
			{
				motion_control->Auto_Stop();
			}
		}
		else if(colorSelected == red)
		{
			if(autoSelected == right)
			{
				if(auton_step == 0)
				{
					if(motion_control->Pid_Move_upTo(114.5))
						auton_step = 1;
				}
				else if(auton_step == 1)
				{
					if(motion_control->Pid_turn_downTo(-120.0))
						auton_step = 2;
				}
				else if(auton_step == 2)
				{
					if(motion_control->Pid_Move_downTo(10.0))
						auton_step = 3;
				}
				else
				{
					motion_control->Auto_Stop();
				}
			}
			else if (autoSelected == middle)
			{
				if(auton_step == 0)
				{
					if(motion_control->Pid_Move_downTo(10.0))
						auton_step = 1;
				}
				else if(auton_step ==1)
				{
					motion_control->Auto_Stop();
				}
			}
			else if (autoSelected == left)
			{
				if(auton_step == 0)
				{
					if(motion_control->Pid_Move_upTo(114.5))
						auton_step = 1;
				}
				else if(auton_step == 1)
				{
					if(motion_control->Pid_turn_upTo(120.0))
						auton_step = 2;
				}
				else if(auton_step == 2)
				{
					if(motion_control->Pid_Move_downTo(10.0))
						auton_step = 3;
				}
				else
				{
					motion_control->Auto_Stop();
				}
			}
		}
		else if (colorSelected == blue)
		{
			if(autoSelected == right)
			{
				if(auton_step == 0)
				{
					if(motion_control->Pid_Move_upTo(114.5))
						auton_step = 1;
				}
				else if(auton_step == 1)
				{
					if(motion_control->Pid_turn_upTo(120.0))
						auton_step = 2;
				}
				else if(auton_step == 2)
				{
					if(motion_control->Pid_Move_downTo(10.0))
						auton_step = 3;
				}
				else
				{
					motion_control->Auto_Stop();
				}
			}
			else if (autoSelected == middle)
			{
				if(auton_step == 0)
				{
					if(motion_control->Pid_Move_downTo(10.0))
						auton_step = 1;
				}
				else if(auton_step ==1)
				{
					motion_control->Auto_Stop();
				}
			}
			else if (autoSelected == left)
			{
				if(auton_step == 0)
				{
					if(motion_control->NOPID_Move(114.5,0.3))
						auton_step = 1;
				}
				else if(auton_step == 1)
				{
					if(motion_control->NOPID_Turn(-120.0,0.3))
						auton_step = 2;
				}
				else if(auton_step == 2)
				{
					if(motion_control->NOPID_Move(20.0,-0.3,false))
						auton_step = 3;
				}
				else
				{
					motion_control->Auto_Stop();
				}
			}
		}

	}

	void TeleopInit() {
	}

	void TeleopPeriodic() {

	}

	void TestPeriodic() {

	}

private:
	frc::SendableChooser<std::string> chooser;
	const std::string left = "Left";
	const std::string middle = "Middle";
	const std::string right = "Right";



	frc::SendableChooser<std::string> color;
	const std::string blue = "Blue";
	const std::string red = "Red";


	std::string autoSelected;
	std::string colorSelected;
};

START_ROBOT_CLASS(Robot)
